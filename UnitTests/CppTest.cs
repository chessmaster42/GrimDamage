using GrimDamage;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SharpTestsEx;

namespace UnitTests
{
    [TestClass]
    public class CppTest
    {
        byte[] result = {
            0x55, 0x8b, 0xec, 0x83, 0xec, 0x10, 0x80, 0x7d, 0x10, 0x00, 0x57, 0x8b, 0xf9, 0x75, 0x31, 0xff, 0x15, 0x94,
            0x40, 0xa8, 0x50, 0x8b, 0x0d, 0xe4, 0x96, 0xd0, 0x50, 0x50, 0xe8, 0x3f, 0x67, 0x19, 0x00, 0x84, 0xc0, 0x75,
            0x0e, 0x8a, 0x87, 0x9c, 0x12, 0x00, 0x00, 0x84, 0xc0, 0x0f, 0x85, 0xd4, 0x00, 0x00, 0x00, 0x80, 0xbf, 0x9d,
            0x12, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xc7, 0x00, 0x00, 0x00, 0xf3, 0x0f, 0x10, 0x4d, 0x08, 0x8d, 0x8f, 0xb4,
            0x08, 0x00, 0x00, 0x0f, 0x57, 0xd2, 0x0f, 0x2f, 0xca, 0x72, 0x1b, 0xf3, 0x0f, 0x10, 0x41, 0x1c, 0xf3, 0x0f,
            0x5c, 0xc1, 0xf3, 0x0f, 0x11, 0x41, 0x1c, 0x0f, 0x28, 0xc1, 0xf3, 0x0f, 0x58, 0x41, 0x24, 0xf3, 0x0f, 0x11,
            0x41, 0x24, 0x80, 0x7d, 0x14, 0x00, 0x53, 0x8b, 0x5d, 0x0c, 0x56, 0xc6, 0x81, 0xa0, 0x04, 0x00, 0x00, 0x01,
            0x74, 0x36, 0x83, 0x3b, 0x01, 0x75, 0x31, 0xf3, 0x0f, 0x10, 0x87, 0xd0, 0x08, 0x00, 0x00, 0xf3, 0x0f, 0x5f,
            0xc2, 0x0f, 0x2f, 0xd0, 0x72, 0x20, 0xe8, 0xe5, 0xc2, 0x01, 0x00, 0xd8, 0x8f, 0xec, 0x15, 0x00, 0x00, 0xf3,
            0x0f, 0x10, 0x45, 0x08, 0xd9, 0x5d, 0x10, 0x0f, 0x2f, 0x45, 0x10, 0x72, 0x07, 0xc6, 0x87, 0xf4, 0x15, 0x00,
            0x00, 0x01, 0x53, 0x8d, 0x45, 0xf8, 0x50, 0x8d, 0x8f, 0x2c, 0x0f, 0x00, 0x00, 0xe8, 0xaa, 0x6b, 0x24, 0x00,
            0x53, 0x8d, 0x45, 0xf0, 0x50, 0x8d, 0x8f, 0x2c, 0x0f, 0x00, 0x00, 0xe8, 0x9a, 0x6b, 0x24, 0x00, 0x8b, 0x45,
            0xf8, 0xf3, 0x0f, 0x10, 0x4d, 0x08, 0x5e, 0xf3, 0x0f, 0x10, 0x40, 0x18, 0x8b, 0x45, 0xf0, 0xf3, 0x0f, 0x58,
            0xc1, 0xf3, 0x0f, 0x11, 0x40, 0x18, 0x83, 0x3b, 0x01, 0x5b, 0x75, 0x11, 0x0f, 0x2f, 0x8f, 0x68, 0x0e, 0x00,
            0x00, 0x76, 0x08, 0xf3, 0x0f, 0x11, 0x8f, 0x68, 0x0e, 0x00, 0x00, 0x5f, 0x8b, 0xe5, 0x5d, 0xc2, 0x10, 0x00,
            0xcc, 0xcc, 0x55, 0x8b, 0xec, 0x80, 0xb9, 0x9e, 0x12, 0x00, 0x00, 0x00, 0x75, 0x30, 0xf3, 0x0f, 0x10, 0x81,
            0xf0, 0x08, 0x00, 0x00, 0xf3, 0x0f, 0x10, 0x4d, 0x08, 0xf3, 0x0f, 0x58, 0xc1, 0xc6, 0x81, 0x54, 0x0d, 0x00,
            0x00, 0x01, 0xf3, 0x0f, 0x11, 0x81, 0xf0, 0x08, 0x00, 0x00, 0xf3, 0x0f, 0x58, 0x89, 0x4c, 0x0f, 0x00, 0x00,
            0xf3, 0x0f, 0x11, 0x89, 0x4c, 0x0f, 0x00, 0x00, 0x5d, 0xc2, 0x04, 0x00, 0x55, 0x8b, 0xec, 0x56, 0x57, 0x8b,
            0xf9, 0x8b, 0xb7, 0x7c, 0x0d, 0x00, 0x00, 0xff, 0x00
        };

        [TestMethod]
        public void CanFuckingWork()
        {
            int lea = 0;
            for (int i = 0; i < result.Length - 5; i++) {
                if (result[i] == 0x8D && result[i + 1] == 0x8F) {
                    lea = IOHelper.GetInt(result, i + 2);
                }
                else if (lea != 0 && result[i] == 0xF3 && result[i + 1] == 0x0F && result[i + 3] == 0x41) {
                    lea += result[i + 4];
                    break;
                }
            }

            lea.Should().Be.EqualTo(564*4);
        }
    }
}
